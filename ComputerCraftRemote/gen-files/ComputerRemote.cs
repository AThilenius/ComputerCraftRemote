/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ComputerCraftRemote
{
  public partial class ComputerRemote {
    public interface Iface {
      string invokeCommandSync(int computerId, string command);
      #if SILVERLIGHT
      IAsyncResult Begin_invokeCommandSync(AsyncCallback callback, object state, int computerId, string command);
      string End_invokeCommandSync(IAsyncResult asyncResult);
      #endif
      void invokeCommandAsync(int computerId, string command);
      #if SILVERLIGHT
      IAsyncResult Begin_invokeCommandAsync(AsyncCallback callback, object state, int computerId, string command);
      void End_invokeCommandAsync(IAsyncResult asyncResult);
      #endif
      bool requestPoolOwnership(string poolName, string ownerName);
      #if SILVERLIGHT
      IAsyncResult Begin_requestPoolOwnership(AsyncCallback callback, object state, string poolName, string ownerName);
      bool End_requestPoolOwnership(IAsyncResult asyncResult);
      #endif
      void freePool(string poolName);
      #if SILVERLIGHT
      IAsyncResult Begin_freePool(AsyncCallback callback, object state, string poolName);
      void End_freePool(IAsyncResult asyncResult);
      #endif
      List<TurtleIdPool> getAllTurtles();
      #if SILVERLIGHT
      IAsyncResult Begin_getAllTurtles(AsyncCallback callback, object state);
      List<TurtleIdPool> End_getAllTurtles(IAsyncResult asyncResult);
      #endif
      List<PoolOwnner> getAllPools();
      #if SILVERLIGHT
      IAsyncResult Begin_getAllPools(AsyncCallback callback, object state);
      List<PoolOwnner> End_getAllPools(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_invokeCommandSync(AsyncCallback callback, object state, int computerId, string command)
      {
        return send_invokeCommandSync(callback, state, computerId, command);
      }

      public string End_invokeCommandSync(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_invokeCommandSync();
      }

      #endif

      public string invokeCommandSync(int computerId, string command)
      {
        #if !SILVERLIGHT
        send_invokeCommandSync(computerId, command);
        return recv_invokeCommandSync();

        #else
        var asyncResult = Begin_invokeCommandSync(null, null, computerId, command);
        return End_invokeCommandSync(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_invokeCommandSync(AsyncCallback callback, object state, int computerId, string command)
      #else
      public void send_invokeCommandSync(int computerId, string command)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("invokeCommandSync", TMessageType.Call, seqid_));
        invokeCommandSync_args args = new invokeCommandSync_args();
        args.ComputerId = computerId;
        args.Command = command;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_invokeCommandSync()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        invokeCommandSync_result result = new invokeCommandSync_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "invokeCommandSync failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_invokeCommandAsync(AsyncCallback callback, object state, int computerId, string command)
      {
        return send_invokeCommandAsync(callback, state, computerId, command);
      }

      public void End_invokeCommandAsync(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void invokeCommandAsync(int computerId, string command)
      {
        #if !SILVERLIGHT
        send_invokeCommandAsync(computerId, command);

        #else
        var asyncResult = Begin_invokeCommandAsync(null, null, computerId, command);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_invokeCommandAsync(AsyncCallback callback, object state, int computerId, string command)
      #else
      public void send_invokeCommandAsync(int computerId, string command)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("invokeCommandAsync", TMessageType.Call, seqid_));
        invokeCommandAsync_args args = new invokeCommandAsync_args();
        args.ComputerId = computerId;
        args.Command = command;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_requestPoolOwnership(AsyncCallback callback, object state, string poolName, string ownerName)
      {
        return send_requestPoolOwnership(callback, state, poolName, ownerName);
      }

      public bool End_requestPoolOwnership(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_requestPoolOwnership();
      }

      #endif

      public bool requestPoolOwnership(string poolName, string ownerName)
      {
        #if !SILVERLIGHT
        send_requestPoolOwnership(poolName, ownerName);
        return recv_requestPoolOwnership();

        #else
        var asyncResult = Begin_requestPoolOwnership(null, null, poolName, ownerName);
        return End_requestPoolOwnership(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_requestPoolOwnership(AsyncCallback callback, object state, string poolName, string ownerName)
      #else
      public void send_requestPoolOwnership(string poolName, string ownerName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("requestPoolOwnership", TMessageType.Call, seqid_));
        requestPoolOwnership_args args = new requestPoolOwnership_args();
        args.PoolName = poolName;
        args.OwnerName = ownerName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_requestPoolOwnership()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        requestPoolOwnership_result result = new requestPoolOwnership_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestPoolOwnership failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_freePool(AsyncCallback callback, object state, string poolName)
      {
        return send_freePool(callback, state, poolName);
      }

      public void End_freePool(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_freePool();
      }

      #endif

      public void freePool(string poolName)
      {
        #if !SILVERLIGHT
        send_freePool(poolName);
        recv_freePool();

        #else
        var asyncResult = Begin_freePool(null, null, poolName);
        End_freePool(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_freePool(AsyncCallback callback, object state, string poolName)
      #else
      public void send_freePool(string poolName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("freePool", TMessageType.Call, seqid_));
        freePool_args args = new freePool_args();
        args.PoolName = poolName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_freePool()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        freePool_result result = new freePool_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAllTurtles(AsyncCallback callback, object state)
      {
        return send_getAllTurtles(callback, state);
      }

      public List<TurtleIdPool> End_getAllTurtles(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAllTurtles();
      }

      #endif

      public List<TurtleIdPool> getAllTurtles()
      {
        #if !SILVERLIGHT
        send_getAllTurtles();
        return recv_getAllTurtles();

        #else
        var asyncResult = Begin_getAllTurtles(null, null);
        return End_getAllTurtles(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAllTurtles(AsyncCallback callback, object state)
      #else
      public void send_getAllTurtles()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAllTurtles", TMessageType.Call, seqid_));
        getAllTurtles_args args = new getAllTurtles_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TurtleIdPool> recv_getAllTurtles()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllTurtles_result result = new getAllTurtles_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllTurtles failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAllPools(AsyncCallback callback, object state)
      {
        return send_getAllPools(callback, state);
      }

      public List<PoolOwnner> End_getAllPools(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAllPools();
      }

      #endif

      public List<PoolOwnner> getAllPools()
      {
        #if !SILVERLIGHT
        send_getAllPools();
        return recv_getAllPools();

        #else
        var asyncResult = Begin_getAllPools(null, null);
        return End_getAllPools(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAllPools(AsyncCallback callback, object state)
      #else
      public void send_getAllPools()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAllPools", TMessageType.Call, seqid_));
        getAllPools_args args = new getAllPools_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<PoolOwnner> recv_getAllPools()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllPools_result result = new getAllPools_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllPools failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["invokeCommandSync"] = invokeCommandSync_Process;
        processMap_["invokeCommandAsync"] = invokeCommandAsync_Process;
        processMap_["requestPoolOwnership"] = requestPoolOwnership_Process;
        processMap_["freePool"] = freePool_Process;
        processMap_["getAllTurtles"] = getAllTurtles_Process;
        processMap_["getAllPools"] = getAllPools_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void invokeCommandSync_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        invokeCommandSync_args args = new invokeCommandSync_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        invokeCommandSync_result result = new invokeCommandSync_result();
        try {
          result.Success = iface_.invokeCommandSync(args.ComputerId, args.Command);
        } catch (LuaException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("invokeCommandSync", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void invokeCommandAsync_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        invokeCommandAsync_args args = new invokeCommandAsync_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.invokeCommandAsync(args.ComputerId, args.Command);
        return;
      }
      public void requestPoolOwnership_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        requestPoolOwnership_args args = new requestPoolOwnership_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        requestPoolOwnership_result result = new requestPoolOwnership_result();
        result.Success = iface_.requestPoolOwnership(args.PoolName, args.OwnerName);
        oprot.WriteMessageBegin(new TMessage("requestPoolOwnership", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void freePool_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        freePool_args args = new freePool_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        freePool_result result = new freePool_result();
        iface_.freePool(args.PoolName);
        oprot.WriteMessageBegin(new TMessage("freePool", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAllTurtles_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllTurtles_args args = new getAllTurtles_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllTurtles_result result = new getAllTurtles_result();
        result.Success = iface_.getAllTurtles();
        oprot.WriteMessageBegin(new TMessage("getAllTurtles", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAllPools_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllPools_args args = new getAllPools_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllPools_result result = new getAllPools_result();
        result.Success = iface_.getAllPools();
        oprot.WriteMessageBegin(new TMessage("getAllPools", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class invokeCommandSync_args : TBase
    {
      private int _computerId;
      private string _command;

      public int ComputerId
      {
        get
        {
          return _computerId;
        }
        set
        {
          __isset.computerId = true;
          this._computerId = value;
        }
      }

      public string Command
      {
        get
        {
          return _command;
        }
        set
        {
          __isset.command = true;
          this._command = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool computerId;
        public bool command;
      }

      public invokeCommandSync_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ComputerId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Command = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("invokeCommandSync_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.computerId) {
          field.Name = "computerId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ComputerId);
          oprot.WriteFieldEnd();
        }
        if (Command != null && __isset.command) {
          field.Name = "command";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Command);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("invokeCommandSync_args(");
        sb.Append("ComputerId: ");
        sb.Append(ComputerId);
        sb.Append(",Command: ");
        sb.Append(Command);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class invokeCommandSync_result : TBase
    {
      private string _success;
      private LuaException _ex;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public LuaException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public invokeCommandSync_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new LuaException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("invokeCommandSync_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("invokeCommandSync_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class invokeCommandAsync_args : TBase
    {
      private int _computerId;
      private string _command;

      public int ComputerId
      {
        get
        {
          return _computerId;
        }
        set
        {
          __isset.computerId = true;
          this._computerId = value;
        }
      }

      public string Command
      {
        get
        {
          return _command;
        }
        set
        {
          __isset.command = true;
          this._command = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool computerId;
        public bool command;
      }

      public invokeCommandAsync_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ComputerId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Command = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("invokeCommandAsync_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.computerId) {
          field.Name = "computerId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ComputerId);
          oprot.WriteFieldEnd();
        }
        if (Command != null && __isset.command) {
          field.Name = "command";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Command);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("invokeCommandAsync_args(");
        sb.Append("ComputerId: ");
        sb.Append(ComputerId);
        sb.Append(",Command: ");
        sb.Append(Command);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestPoolOwnership_args : TBase
    {
      private string _poolName;
      private string _ownerName;

      public string PoolName
      {
        get
        {
          return _poolName;
        }
        set
        {
          __isset.poolName = true;
          this._poolName = value;
        }
      }

      public string OwnerName
      {
        get
        {
          return _ownerName;
        }
        set
        {
          __isset.ownerName = true;
          this._ownerName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool poolName;
        public bool ownerName;
      }

      public requestPoolOwnership_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PoolName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OwnerName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("requestPoolOwnership_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PoolName != null && __isset.poolName) {
          field.Name = "poolName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PoolName);
          oprot.WriteFieldEnd();
        }
        if (OwnerName != null && __isset.ownerName) {
          field.Name = "ownerName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OwnerName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("requestPoolOwnership_args(");
        sb.Append("PoolName: ");
        sb.Append(PoolName);
        sb.Append(",OwnerName: ");
        sb.Append(OwnerName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestPoolOwnership_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public requestPoolOwnership_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("requestPoolOwnership_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("requestPoolOwnership_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class freePool_args : TBase
    {
      private string _poolName;

      public string PoolName
      {
        get
        {
          return _poolName;
        }
        set
        {
          __isset.poolName = true;
          this._poolName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool poolName;
      }

      public freePool_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PoolName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("freePool_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PoolName != null && __isset.poolName) {
          field.Name = "poolName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PoolName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("freePool_args(");
        sb.Append("PoolName: ");
        sb.Append(PoolName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class freePool_result : TBase
    {

      public freePool_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("freePool_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("freePool_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllTurtles_args : TBase
    {

      public getAllTurtles_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllTurtles_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAllTurtles_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllTurtles_result : TBase
    {
      private List<TurtleIdPool> _success;

      public List<TurtleIdPool> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getAllTurtles_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TurtleIdPool>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    TurtleIdPool _elem2 = new TurtleIdPool();
                    _elem2 = new TurtleIdPool();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllTurtles_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TurtleIdPool _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAllTurtles_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllPools_args : TBase
    {

      public getAllPools_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllPools_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAllPools_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllPools_result : TBase
    {
      private List<PoolOwnner> _success;

      public List<PoolOwnner> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getAllPools_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PoolOwnner>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    PoolOwnner _elem6 = new PoolOwnner();
                    _elem6 = new PoolOwnner();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllPools_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (PoolOwnner _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAllPools_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
